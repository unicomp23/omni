# Redpanda Docker Deployment

## Quick Start with Docker

### Single Node Cluster
```bash
docker run -d \
  --name redpanda-0 \
  --hostname redpanda-0 \
  -p 9092:9092 \
  -p 9644:9644 \
  docker.redpanda.com/redpandadata/redpanda:latest \
  redpanda start \
  --smp 1 \
  --memory 1G \
  --reserve-memory 0M \
  --overprovisioned \
  --node-id 0 \
  --kafka-addr PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092 \
  --advertise-kafka-addr PLAINTEXT://redpanda-0:29092,OUTSIDE://localhost:9092 \
  --pandaproxy-addr 0.0.0.0:8082 \
  --advertise-pandaproxy-addr localhost:8082
```

### Multi-Node Cluster with Docker Compose
```yaml
version: '3.7'
services:
  redpanda-0:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: redpanda-0
    command:
      - redpanda
      - start
      - --smp
      - '1'
      - --reserve-memory
      - '0M'
      - --overprovisioned
      - --node-id
      - '0'
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda-0:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr
      - 0.0.0.0:8082
      - --advertise-pandaproxy-addr
      - localhost:8082
      - --schema-registry-addr
      - 0.0.0.0:8081
      - --rpc-addr
      - redpanda-0:33145
      - --advertise-rpc-addr
      - redpanda-0:33145
    ports:
      - 8081:8081
      - 8082:8082
      - 9092:9092
      - 9644:9644
    volumes:
      - redpanda-0:/var/lib/redpanda/data
    networks:
      - redpanda_network

  redpanda-1:
    image: docker.redpanda.com/redpandadata/redpanda:latest
    container_name: redpanda-1
    command:
      - redpanda
      - start
      - --smp
      - '1'
      - --reserve-memory
      - '0M'
      - --overprovisioned
      - --node-id
      - '1'
      - --seeds
      - redpanda-0:33145
      - --kafka-addr
      - PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9093
      - --advertise-kafka-addr
      - PLAINTEXT://redpanda-1:29092,OUTSIDE://localhost:9093
      - --pandaproxy-addr
      - 0.0.0.0:8083
      - --advertise-pandaproxy-addr
      - localhost:8083
      - --schema-registry-addr
      - 0.0.0.0:8084
      - --rpc-addr
      - redpanda-1:33145
      - --advertise-rpc-addr
      - redpanda-1:33145
    ports:
      - 8084:8084
      - 8083:8083
      - 9093:9093
      - 9645:9644
    volumes:
      - redpanda-1:/var/lib/redpanda/data
    networks:
      - redpanda_network
    depends_on:
      - redpanda-0

volumes:
  redpanda-0:
  redpanda-1:

networks:
  redpanda_network:
    driver: bridge
```

## Using RPK Container Commands

### Start Container Cluster
```bash
rpk container start
```

### Stop Container Cluster
```bash
rpk container stop
```

### Purge Container Data
```bash
rpk container purge
```

### Container Status
```bash
rpk container status
```

## Configuration Options

### Memory Settings
- `--memory`: Total memory to allocate
- `--reserve-memory`: Memory to reserve for OS
- `--overprovisioned`: Allow overprovisioning for dev environments

### Network Configuration
- `--kafka-addr`: Kafka listener addresses
- `--advertise-kafka-addr`: Advertised Kafka addresses
- `--pandaproxy-addr`: Pandaproxy listener address
- `--schema-registry-addr`: Schema registry listener address

### Cluster Settings
- `--node-id`: Unique node identifier
- `--seeds`: Seed nodes for cluster formation
- `--smp`: Number of CPU cores to use

## Health Checks

### Container Health Check
```bash
docker exec redpanda-0 rpk cluster info
```

### Topic Operations
```bash
# Create topic
docker exec redpanda-0 rpk topic create my-topic

# List topics
docker exec redpanda-0 rpk topic list

# Produce messages
docker exec redpanda-0 rpk topic produce my-topic

# Consume messages
docker exec redpanda-0 rpk topic consume my-topic
```

## Port Mappings
- `9092`: Kafka API
- `8082`: Pandaproxy (REST API)
- `8081`: Schema Registry
- `9644`: Admin API
- `33145`: RPC (internal cluster communication)

## Best Practices
- Use persistent volumes for production deployments
- Configure appropriate memory limits
- Set up proper networking for multi-node clusters
- Use health checks for container orchestration
- Monitor resource usage and performance metrics
description:
globs:
alwaysApply: false
---

---
alwaysApply: false
---

# Redpanda CDK Integration Guide

This guide covers AWS CDK patterns for deploying and integrating with Redpanda streaming platform.

## CDK Redpanda ECS Deployment

### ECS Service Configuration
```typescript
import * as ecs from 'aws-cdk-lib/aws-ecs';
import * as ec2 from 'aws-cdk-lib/aws-ec2';
import * as logs from 'aws-cdk-lib/aws-logs';

export class RedpandaEcsStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    const vpc = new ec2.Vpc(this, 'RedpandaVpc', {
      maxAzs: 3,
      natGateways: 1,
    });

    const cluster = new ecs.Cluster(this, 'RedpandaCluster', {
      vpc,
      enableFargateCapacityProviders: true,
    });

    const taskDefinition = new ecs.FargateTaskDefinition(this, 'RedpandaTask', {
      memoryLimitMiB: 4096,
      cpu: 2048,
    });

    const redpandaContainer = taskDefinition.addContainer('redpanda', {
      image: ecs.ContainerImage.fromRegistry('docker.redpanda.com/redpandadata/redpanda:latest'),
      logging: ecs.LogDrivers.awsLogs({
        logGroup: new logs.LogGroup(this, 'RedpandaLogGroup', {
          retention: logs.RetentionDays.ONE_WEEK,
        }),
        streamPrefix: 'redpanda',
      }),
      environment: {
        REDPANDA_ENVIRONMENT: 'production',
        REDPANDA_CLOUD_STORAGE_ENABLED: 'true',
        REDPANDA_CLOUD_STORAGE_REGION: this.region,
        REDPANDA_CLOUD_STORAGE_BUCKET: 'my-redpanda-bucket',
      },
      portMappings: [
        { containerPort: 9092, protocol: ecs.Protocol.TCP }, // Kafka API
        { containerPort: 8081, protocol: ecs.Protocol.TCP }, // Schema Registry
        { containerPort: 8082, protocol: ecs.Protocol.TCP }, // REST Proxy
        { containerPort: 9644, protocol: ecs.Protocol.TCP }, // Admin API
      ],
    });

    // Add data volume for persistence
    const dataVolume = {
      name: 'redpanda-data',
      efsVolumeConfiguration: {
        fileSystemId: 'fs-12345678', // Replace with actual EFS ID
        transitEncryption: 'ENABLED',
      },
    };

    taskDefinition.addVolume(dataVolume);
    redpandaContainer.addMountPoints({
      containerPath: '/var/lib/redpanda/data',
      sourceVolume: 'redpanda-data',
      readOnly: false,
    });
  }
}
```

## Application Integration Patterns

### Lambda Integration
```typescript
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as events from 'aws-cdk-lib/aws-events';

export class RedpandaLambdaIntegration extends Construct {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    // Environment configuration
    const redpandaConfig = {
      REDPANDA_BROKERS: 'redpanda-cluster.internal:9092',
      REDPANDA_SCHEMA_REGISTRY: 'http://redpanda-cluster.internal:8081',
      REDPANDA_USERNAME: 'lambda-user',
      REDPANDA_PASSWORD: 'lambda-password',
    };

    // Producer Lambda
    const producerFunction = new lambda.Function(this, 'RedpandaProducer', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'producer.handler',
      code: lambda.Code.fromAsset('lambda/producer'),
      environment: redpandaConfig,
      timeout: Duration.seconds(30),
    });

    // Consumer Lambda
    const consumerFunction = new lambda.Function(this, 'RedpandaConsumer', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'consumer.handler',
      code: lambda.Code.fromAsset('lambda/consumer'),
      environment: redpandaConfig,
      timeout: Duration.seconds(300),
    });

    // Event Bridge integration
    const eventBridge = new events.EventBridge(this, 'RedpandaEventBridge');
    
    // Schedule consumer to poll messages
    new events.Rule(this, 'ConsumerSchedule', {
      schedule: events.Schedule.rate(Duration.minutes(1)),
      targets: [new targets.LambdaFunction(consumerFunction)],
    });
  }
}
```

### API Gateway Integration
```typescript
import * as apigateway from 'aws-cdk-lib/aws-apigateway';
import * as lambda from 'aws-cdk-lib/aws-lambda';

export class RedpandaApiGateway extends Construct {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    const api = new apigateway.RestApi(this, 'RedpandaApi', {
      restApiName: 'Redpanda Service',
      description: 'API for Redpanda streaming operations',
    });

    // Proxy Lambda for Redpanda operations
    const redpandaProxy = new lambda.Function(this, 'RedpandaProxy', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'proxy.handler',
      code: lambda.Code.fromAsset('lambda/proxy'),
      environment: {
        REDPANDA_BROKERS: 'redpanda-cluster.internal:9092',
        REDPANDA_SCHEMA_REGISTRY: 'http://redpanda-cluster.internal:8081',
      },
    });

    // API Resources
    const topics = api.root.addResource('topics');
    const topic = topics.addResource('{topic}');
    
    // Produce messages
    topic.addResource('produce').addMethod('POST', 
      new apigateway.LambdaIntegration(redpandaProxy)
    );
    
    // Consume messages
    topic.addResource('consume').addMethod('GET', 
      new apigateway.LambdaIntegration(redpandaProxy)
    );
    
    // Schema operations
    const schemas = api.root.addResource('schemas');
    schemas.addResource('{subject}').addMethod('GET', 
      new apigateway.LambdaIntegration(redpandaProxy)
    );
  }
}
```

## Configuration Management

### Parameter Store Integration
```typescript
import * as ssm from 'aws-cdk-lib/aws-ssm';
import * as secretsmanager from 'aws-cdk-lib/aws-secretsmanager';

export class RedpandaConfigConstruct extends Construct {
  public readonly brokers: string;
  public readonly schemaRegistry: string;
  public readonly credentials: secretsmanager.Secret;

  constructor(scope: Construct, id: string) {
    super(scope, id);

    // Store configuration in Parameter Store
    const brokersParameter = new ssm.StringParameter(this, 'RedpandaBrokers', {
      parameterName: '/redpanda/brokers',
      stringValue: 'redpanda-cluster.internal:9092',
      description: 'Redpanda broker endpoints',
    });

    const schemaRegistryParameter = new ssm.StringParameter(this, 'RedpandaSchemaRegistry', {
      parameterName: '/redpanda/schema-registry',
      stringValue: 'http://redpanda-cluster.internal:8081',
      description: 'Redpanda Schema Registry endpoint',
    });

    // Store credentials in Secrets Manager
    this.credentials = new secretsmanager.Secret(this, 'RedpandaCredentials', {
      secretName: 'redpanda-credentials',
      description: 'Redpanda authentication credentials',
      generateSecretString: {
        secretStringTemplate: JSON.stringify({ username: 'admin' }),
        generateStringKey: 'password',
        excludeCharacters: '"@/\\',
      },
    });

    this.brokers = brokersParameter.stringValue;
    this.schemaRegistry = schemaRegistryParameter.stringValue;
  }
}
```

## Monitoring and Observability

### CloudWatch Integration
```typescript
import * as cloudwatch from 'aws-cdk-lib/aws-cloudwatch';
import * as logs from 'aws-cdk-lib/aws-logs';

export class RedpandaMonitoring extends Construct {
  constructor(scope: Construct, id: string) {
    super(scope, id);

    // CloudWatch Dashboard
    const dashboard = new cloudwatch.Dashboard(this, 'RedpandaDashboard', {
      dashboardName: 'Redpanda-Metrics',
    });

    // Custom metrics for Redpanda
    const throughputMetric = new cloudwatch.Metric({
      namespace: 'Redpanda',
      metricName: 'MessageThroughput',
      dimensionsMap: {
        Cluster: 'redpanda-cluster',
      },
      statistic: 'Average',
    });

    const consumerLagMetric = new cloudwatch.Metric({
      namespace: 'Redpanda',
      metricName: 'ConsumerLag',
      dimensionsMap: {
        Cluster: 'redpanda-cluster',
      },
      statistic: 'Maximum',
    });

    // Add widgets to dashboard
    dashboard.addWidgets(
      new cloudwatch.GraphWidget({
        title: 'Message Throughput',
        left: [throughputMetric],
        width: 12,
        height: 6,
      }),
      new cloudwatch.GraphWidget({
        title: 'Consumer Lag',
        left: [consumerLagMetric],
        width: 12,
        height: 6,
      })
    );

    // Alarms
    new cloudwatch.Alarm(this, 'HighConsumerLag', {
      metric: consumerLagMetric,
      threshold: 10000,
      evaluationPeriods: 2,
      treatMissingData: cloudwatch.TreatMissingData.NOT_BREACHING,
    });

    // Log insights queries
    const logGroup = logs.LogGroup.fromLogGroupName(this, 'RedpandaLogs', '/aws/ecs/redpanda');
    
    new logs.QueryDefinition(this, 'ErrorsQuery', {
      queryDefinitionName: 'Redpanda-Errors',
      queryString: 'fields @timestamp, @message | filter @message like /ERROR/ | sort @timestamp desc',
      logGroups: [logGroup],
    });
  }
}
```

## Security Configurations

### IAM Roles and Policies
```typescript
import * as iam from 'aws-cdk-lib/aws-iam';

export class RedpandaIAMRoles extends Construct {
  public readonly taskRole: iam.Role;
  public readonly lambdaRole: iam.Role;

  constructor(scope: Construct, id: string) {
    super(scope, id);

    // ECS Task Role
    this.taskRole = new iam.Role(this, 'RedpandaTaskRole', {
      assumedBy: new iam.ServicePrincipal('ecs-tasks.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AmazonECSTaskExecutionRolePolicy'),
      ],
    });

    // Add S3 permissions for tiered storage
    this.taskRole.addToPolicy(new iam.PolicyStatement({
      effect: iam.Effect.ALLOW,
      actions: [
        's3:GetObject',
        's3:PutObject',
        's3:DeleteObject',
        's3:ListBucket',
      ],
      resources: [
        'arn:aws:s3:::my-redpanda-bucket',
        'arn:aws:s3:::my-redpanda-bucket/*',
      ],
    }));

    // Lambda execution role
    this.lambdaRole = new iam.Role(this, 'RedpandaLambdaRole', {
      assumedBy: new iam.ServicePrincipal('lambda.amazonaws.com'),
      managedPolicies: [
        iam.ManagedPolicy.fromAwsManagedPolicyName('service-role/AWSLambdaBasicExecutionRole'),
      ],
    });

    // Add secrets manager permissions
    this.lambdaRole.addToPolicy(new iam.PolicyStatement({
      effect: iam.Effect.ALLOW,
      actions: [
        'secretsmanager:GetSecretValue',
        'ssm:GetParameter',
      ],
      resources: [
        'arn:aws:secretsmanager:*:*:secret:redpanda-credentials*',
        'arn:aws:ssm:*:*:parameter/redpanda/*',
      ],
    }));
  }
}
```

## Environment-Specific Configuration

### Development Environment
```typescript
export class RedpandaDevStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    // Use rpk container for development
    const redpandaContainer = new lambda.Function(this, 'DevRedpanda', {
      runtime: lambda.Runtime.NODEJS_18_X,
      handler: 'dev-setup.handler',
      code: lambda.Code.fromInline(`
        const { exec } = require('child_process');
        
        exports.handler = async (event) => {
          // Start Redpanda container for development
          exec('rpk container start --memory 2G --cpus 2', (error, stdout, stderr) => {
            if (error) {
              console.error('Error starting Redpanda:', error);
              return;
            }
            console.log('Redpanda started:', stdout);
          });
          
          return { statusCode: 200, body: 'Redpanda dev environment started' };
        };
      `),
      environment: {
        REDPANDA_BROKERS: 'localhost:19092',
        REDPANDA_SCHEMA_REGISTRY: 'http://localhost:18081',
      },
    });
  }
}
```

### Production Environment
```typescript
export class RedpandaProdStack extends Stack {
  constructor(scope: Construct, id: string, props?: StackProps) {
    super(scope, id, props);

    // High-availability configuration
    const redpandaCluster = new ecs.Cluster(this, 'RedpandaProdCluster', {
      vpc: vpc,
      capacity: {
        minCapacity: 3,
        maxCapacity: 9,
        desiredCapacity: 3,
      },
    });

    // Production-grade configuration
    const prodConfig = {
      REDPANDA_ENVIRONMENT: 'production',
      REDPANDA_CLOUD_STORAGE_ENABLED: 'true',
      REDPANDA_CLOUD_STORAGE_REGION: this.region,
      REDPANDA_CLOUD_STORAGE_BUCKET: 'prod-redpanda-bucket',
      REDPANDA_ENABLE_SASL: 'true',
      REDPANDA_SASL_MECHANISM: 'SCRAM-SHA-256',
    };
  }
}
```

## Best Practices for CDK + Redpanda

1. **Use Constructs**: Create reusable constructs for common Redpanda patterns
2. **Environment Variables**: Store configuration in Parameter Store or Secrets Manager
3. **Monitoring**: Set up CloudWatch dashboards and alarms
4. **Security**: Use IAM roles with least-privilege principles
5. **High Availability**: Deploy across multiple AZs
6. **Data Persistence**: Use EFS or EBS for data storage
7. **Networking**: Use VPC endpoints for secure communication
8. **Scaling**: Implement auto-scaling policies for ECS services
9. **Backup**: Configure S3 tiered storage for data retention
10. **Testing**: Use rpk container for local development and testing

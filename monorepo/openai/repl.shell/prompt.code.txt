import {LengthDelimitedString} from "../lengthDelimitedString/lengthDelimitedString";

export class Message {
    private data: Map<string, string>;

    constructor() {
        this.data = new Map();
    }

    public static deserialize(serializedData: string, startingOffset: number = 0): {
        message: Message;
        offset: number
    } {
        if (typeof serializedData !== 'string' || serializedData.length === 0) {
            throw new Error('Invalid input: serializedData must be a non-empty string');
        }

        if (typeof startingOffset !== 'number' || startingOffset < 0 || startingOffset > serializedData.length) {
            throw new Error('Invalid input: startingOffset must be a valid position in the serializedData');
        }

        const message = new Message();
        let offset = startingOffset;

        // Deserialize the count of tag-value pairs
        const deserializedCount = LengthDelimitedString.deserialize(serializedData.slice(offset));
        offset += deserializedCount.offset;
        const count = parseInt(deserializedCount.str || '0', 10);

        // Deserialize tag-value pairs based on the count
        for (let i = 0; i < count; i++) {
            const deserializedTag = LengthDelimitedString.deserialize(serializedData.slice(offset));
            offset += deserializedTag.offset;

            const deserializedValue = LengthDelimitedString.deserialize(serializedData.slice(offset));
            offset += deserializedValue.offset;

            if (deserializedTag.str === null || deserializedValue.str === null) {
                break;
            }

            message.set(deserializedTag.str, deserializedValue.str);
        }

        return {message, offset};
    }

    public set(tag: string, value: string): void {
        if (typeof tag !== 'string' || tag.length === 0 || typeof value !== 'string' || value.length === 0) {
            throw new Error('Invalid input: tag and value must be non-empty strings');
        }
        this.data.set(tag, value);
    }

    public get(tag: string): string | undefined {
        return this.data.get(tag);
    }

    public serialize(): string {
        const count = this.data.size;
        const serializedCount = LengthDelimitedString.serialize(count.toString());

        let serializedData = '';
        for (const [tag, value] of this.data.entries()) {
            const serializedTag = LengthDelimitedString.serialize(tag);
            const serializedValue = LengthDelimitedString.serialize(value);
            serializedData += (serializedTag + serializedValue);
        }

        return serializedCount + serializedData;
    }
}export class LengthDelimitedString {
    public static serialize(str: string): string {
        if (typeof str !== 'string' || str.length === 0) {
            throw new Error('Invalid input: str must be a non-empty string');
        }

        if (str.length > 0xFFFF) {
            throw new Error('Input too long: Maximum length is 65,535 characters');
        }

        const lengthStr = `(${str.length.toString(16).padStart(4, '0').toUpperCase()})`;

        return lengthStr + str;
    }

    public static deserialize(serialized: string): { str: string | null; offset: number } {
        if (typeof serialized !== 'string' || serialized.length === 0) {
            throw new Error('Invalid input: serialized must be a non-empty string');
        }

        if (serialized.length < 6 || serialized[0] !== '(' || serialized[5] !== ')') {
            throw new Error('Incomplete length delimiter');
        }

        for (let i = 1; i < 5; i++) {
            const char = serialized[i];
            if (!/[0-9a-fA-F]/.test(char)) {
                throw new Error(`Invalid hex digit at index ${i}: ${char}`);
            }
        }

        const length = parseInt(serialized.slice(1, 5).toUpperCase(), 16);

        if (serialized.length - 6 < length) {
            throw new Error('Incomplete string data');
        }

        const str = serialized.slice(6, 6 + length);
        const offset = 6 + length;

        return {str, offset};
    }
}import {LengthDelimitedString} from "../lengthDelimitedString/lengthDelimitedString";

type Property = {
    tag: string;
    value: string;
};

export class PropertyPath {
    private data: Property[];

    constructor() {
        this.data = [];
    }

    public static deserialize(serializedData: string, startingOffset: number = 0): {
        propertyPath: PropertyPath;
        offset: number
    } {
        if (typeof serializedData !== "string" || serializedData.length === 0) {
            throw new Error("Invalid input: serializedData must be a non-empty string");
        }

        if (typeof startingOffset !== "number" || startingOffset < 0 || startingOffset > serializedData.length) {
            throw new Error("Invalid input: startingOffset must be a valid position in the serializedData");
        }

        const propertyPath = new PropertyPath();
        let offset = startingOffset;

        // Deserialize the count of tag-value pairs
        const deserializedCount = LengthDelimitedString.deserialize(serializedData.slice(offset));
        offset += deserializedCount.offset;
        const count = parseInt(deserializedCount.str || "0", 10);

        // Deserialize tag-value pairs based on the count
        for (let i = 0; i < count; i++) {
            const deserializedTag = LengthDelimitedString.deserialize(serializedData.slice(offset));
            offset += deserializedTag.offset;

            const deserializedValue = LengthDelimitedString.deserialize(serializedData.slice(offset));
            offset += deserializedValue.offset;

            if (deserializedTag.str === null || deserializedValue.str === null) {
                break;
            }

            propertyPath.set(deserializedTag.str, deserializedValue.str);
        }

        return {propertyPath, offset};
    }

    public set(tag: string, value: string): void {
        if (typeof tag !== "string" || tag.length === 0 || typeof value !== "string" || value.length === 0) {
            throw new Error("Invalid input: tag and value must be non-empty strings");
        }
        const index = this.data.findIndex((property) => property.tag === tag);
        if (index >= 0) {
            this.data[index].value = value;
        } else {
            this.data.push({tag, value});
        }
    }

    public get(tag: string): string | undefined {
        const property = this.data.find((property) => property.tag === tag);
        return property?.value;
    }

    public serialize(): string {
        const count = this.data.length;
        const serializedCount = LengthDelimitedString.serialize(count.toString());

        let serializedData = "";
        for (const property of this.data) {
            const serializedTag = LengthDelimitedString.serialize(property.tag);
            const serializedValue = LengthDelimitedString.serialize(property.value);
            serializedData += serializedTag + serializedValue;
        }

        return serializedCount + serializedData;
    }

    public getByIndex(index: number): { tag: string, value: string } | undefined {
        if (index >= 0 && index < this.data.length) {
            return this.data[index];
        }
        return undefined;
    }
}import { LengthDelimitedString } from "../lengthDelimitedString/lengthDelimitedString";

export class PathArray extends Array<string> {
    public static fromArray(array: string[]): PathArray {
        const pathArray = new PathArray();
        pathArray.push(...array);
        return pathArray;
    }

    public static serialize(pathArray: PathArray): string {
        const serializedPaths = pathArray.map((path) => LengthDelimitedString.serialize(path)).join("");
        return serializedPaths;
    }

    public static deserialize(serializedData: string, startingOffset: number = 0): {
        pathArray: PathArray;
        offset: number;
    } {
        let offset = startingOffset;
        const pathArray = new PathArray();

        while (offset < serializedData.length) {
            const deserializedPath = LengthDelimitedString.deserialize(serializedData.slice(offset));
            offset += deserializedPath.offset;

            if (deserializedPath.str === null) {
                break;
            }

            pathArray.push(deserializedPath.str);
        }

        return { pathArray, offset };
    }

    public deserialize(serializedData: string, startingOffset: number = 0): {
        pathArray: PathArray;
        offset: number;
    } {
        this.length = 0;
        const result = PathArray.deserialize(serializedData, startingOffset);
        this.push(...result.pathArray);
        return result;
    }

    public serialize() {
        return PathArray.serialize(this);
    }

    public startsWith(pathArray: PathArray): boolean {
        if (this.length < pathArray.length) {
            return false;
        }

        for (let i = 0; i < pathArray.length; i++) {
            if (this[i] !== pathArray[i]) {
                return false;
            }
        }

        return true;
    }
}
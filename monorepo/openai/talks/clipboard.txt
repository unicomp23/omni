NATS JetStream is a messaging system providing streams and consumers for data retention, processing, and delivery. It's designed for high volume, low latency, and performance-critical systems. However, out-of-the-box, JetStream doesn't provide direct support for merging deltas or handling snapshots like distributed databases typically do.
When it comes to message streaming scenarios, JetStream can deliver messages in sequence, also providing acknowledgment and redelivery if needed. It also supports multiple consumers, each having their respective processing offset, allowing late joiners to start consuming from the given point in time.
However, handling concepts like deltas, snapshots, or merging deltas requires additional logic on top of JetStream. You would need to build an application-layer protocol that uses JetStream as a messaging infrastructure, and inside your application, you would implement the logic to handle these concepts.
For example, when creating an event sourcing system, you would store events (deltas) in a JetStream stream and build projection handlers that apply these events (deltas) to an aggregate (state). Then, you can periodically produce snapshots of the aggregate and provide a mechanism for late joiners or clients to catch up, starting from the latest snapshot and then applying the events that have occurred since.
So, although JetStream doesn't directly handle deltas or snapshots, it provides a solid underlying infrastructure to build systems that can manage these concepts at the application level.

https://github.com/nats-io/nats.deno/tree/main/nats-base-client

implement event sourcing on jetstream using application level sequence numbers.  create extensive documentation and mermaidjs sequence diagrams.  be sure to elaborate heavily on sequence numbers, events, snapshots, late joiners.  snapshots are stored in jetstream kv.  include sequence diagrams covering all scenarios, in addition to typescript examples exercising each scenario.  snapshots contain a sequence number, explain alignment between snapshots and events.  generate a readme.md for github.
